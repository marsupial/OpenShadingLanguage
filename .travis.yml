# .travis.yml for OSL

language: cpp
sudo: false
#compiler:
#    - clang
#    - gcc
#os:
#    - linux
#    - osx
osx_image: xcode7.3
dist: precise


# Add-ons: specify apt packages for Linux
addons:
  apt:
   sources:
      - boost-latest
      - ubuntu-toolchain-r-test
      - george-edison55-precise-backports
   packages:
      - cmake
      - cmake-data
      - gcc-4.8
      - g++-4.8
      - gcc-6
      - g++-6
      - libboost1.55-all-dev
      - libtiff4-dev
      - llvm-3.4-dev
      - clang-3.4

cache:
    ccache: true
    apt: true
    directories:
      - $HOME/.ccache
      - $HOME/OSL_build

before_install:
- |
  export BOT_ROOT=$HOME/OSL_build
  export BOT_JOBS=4
  export SECONDS=0
  function BotTimeRemaing {
    local REMAIN=$(expr 35 - $SECONDS / 60)
    if [[ $REMAIN -gt 0 && ( -z "$1" || $REMAIN -gt $1 ) ]]; then
      echo $REMAIN
    fi
  }
  function BotGetURL {
      local URL=$1; shift;
      local NAME=`basename $URL`
      wget $URL --no-check-certificate "$@" -qO /tmp/$NAME
      echo /tmp/$NAME
  }
  function BotTmpDir {
    echo `mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir'`
  }
  function BotExtractUrl {
    local DSTDIR=`BotTmpDir`
    local URL=$1; shift;
    local FMT=z
    local NAME=`basename $URL`
    local EXT=${NAME##*.}
    if [[ "$EXT" == "bz2" ]]; then FMT=j; fi;
    wget $URL --no-check-certificate "$@" -qO- | tar -x${FMT} --strip-components=1 -C "$DSTDIR"
    echo $DSTDIR
  }
  function BotCmakeBuild {
    local PREFIX=$1; shift;
    mkdir tmpbuild && pushd tmpbuild
    echo cmake $CMAKE_FLAGS -DCMAKE_PREFIX_PATH=$BOT_ROOT -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_INSTALL_NAME_DIR=@rpath "$@"
    cmake $CMAKE_FLAGS -DCMAKE_PREFIX_PATH=$BOT_ROOT -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_INSTALL_NAME_DIR=@rpath "$@" ..
    make -j $BOT_JOBS install
    popd
  }
  function BotCmakeBuildArk {
    pushd "$(BotExtractUrl $1)"; shift;
    BotCmakeBuild "$@"
    popd
  }

  if [ "$WHICHGCC" == "" ]; then export WHICHGCC="4.8" ; fi
  if [ $TRAVIS_OS_NAME == osx ] ; then
    sysctl machdep.cpu.features ;
  elif [ $TRAVIS_OS_NAME == linux ] ; then
    # FIXME: Workaround for OIIO needing -ldl
    export LD_LIBRARY_PATH=$BOT_ROOT/lib:$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu
    cat /proc/cpuinfo ;
  fi
  export CMAKE_OIIO_FLAGS="-DSTOP_ON_WARNING=OFF -DUSE_OPENJPEG=ON"

install:
- |
  if [ "$CXX" == "g++" ]; then export CXX="g++-${WHICHGCC}" ; fi
  export USE_CCACHE=1
  export CCACHE_CPP2=1
  if [ $TRAVIS_OS_NAME == osx ] ; then
      src/build-scripts/install_homebrew_deps.bash ;
  elif [ $TRAVIS_OS_NAME == linux ] ; then
      export BUILD_FLAGS="$BUILD_FLAGS LLVM_STATIC=1" ;
      export TEST_FLAGS="-E broken\|render-cornell\|render-oren-nayar\|render-veachmis\|render-ward" ;
      # ^^^ Linux only, can't make these test work. Exclude for now and return later. ;
  fi

- |
  # OpenImageIO
  if [ $(BotTimeRemaing 5) ] && [ ! -d "$BOT_ROOT/include/OpenImageIO" ]; then
    BotCmakeBuildArk https://github.com/OpenImageIO/oiio/archive/Release-1.7.11.tar.gz "$BOT_ROOT" $CMAKE_OIIO_FLAGS
  else
    echo "Using cached OpenImageIO"
  fi
  export OPENIMAGEIOHOME=$BOT_ROOT
  
script:
- |
  mkdir -p build && cd build
  cmake -DOSL_BUILD_TESTS=ON $CMAKE_FLAGS -DCMAKE_PREFIX_PATH=$BOT_ROOT -DCMAKE_INSTALL_PREFIX=$BOT_ROOT -DCMAKE_INSTALL_NAME_DIR=@rpath "$@" ../
  make -j $BOT_JOBS
  #export OSLHOME=$BOT_ROOT
  export PYTHONPATH=$OSLHOME/python:$BOT_ROOT/python:$PYTHONPATH
  pushd /home/travis/build/marsupial/OpenShadingLanguage/testsuite/aastep
  /home/travis/build/marsupial/OpenShadingLanguage/build/src/oslc/oslc test.osl
  /home/travis/build/marsupial/OpenShadingLanguage/build/src/testshade/testshade -g 64 64 -od uint8 -o Cout out.tif test 
  popd
  ctest --output-on-failure #--verbose

after_success:
    - if [ "$CODECOV" == 1 ]; then bash <(curl -s https://codecov.io/bash) ; fi

after_failure:
# FIXME: find failed logs, stash them or send them to lg?

branches:
  only:
    - master
    - dev

matrix:
    fast_finish: true
    include:
      # Build with C++11, optimized build, against OIIO master
      - os: linux
        compiler: gcc
      - os: osx
        compiler: clang
      # Build with C++11, DEBUG build, against OIIO master
      - os: linux
        compiler: gcc
        env: DEBUG=1
      - os: osx
        compiler: clang
        env: DEBUG=1
    # Test against the older release branch of OIIO (all the other tests
    # are against OIIO master).
      - os: linux
        compiler: gcc
        env: OIIOBRANCH=release USE_CPP11=1
      - os: osx
        compiler: clang
        env: OIIOBRANCH=release USE_CPP11=1
    # Linux only: test gcc 6 (catch new warnings hot off the presses) and
    # also use a higher SIMD level, avx and f16c, to make sure all is well.
    # TravisCI's OSX images don't yet support avx/f16c, so we only do this
    # on Linux for now, but eventually we'll want to separate these concerns
    # into separate tests.
      - os: linux
        compiler: gcc
        env: WHICHGCC=6 USE_SIMD=avx,f16c
    # One more, just for the heck of it, turn all SIMD off.  I guess this
    # should/could be both platforms, but in the interest of making the
    # tests go faster, don't bother doing it on OSX.
      - os: linux
        compiler: gcc
        env: USE_SIMD=0

notifications:
    email:
#        recipients:
#            - 
        on_success: change
        on_failure: always
